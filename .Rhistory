if(is.na(cores)) cores <- detectCores()
registerDoParallel(cores)
# Set Run Level for debug, timing, and full computation
RUN_LEVEL = 1
NP <- switch(RUN_LEVEL, 50, 4e3, 2000)
NMIF <- switch(RUN_LEVEL,  3, 15, 50)
NREPS_GLOBAL <- switch(RUN_LEVEL,  3,  10, 72)
NREPS_LOCAL <- switch(RUN_LEVEL, 3, 10, 36)
NREPS_EVAL <- switch(RUN_LEVEL, 3, 5, cores)
NP_EVAL1 <- switch(RUN_LEVEL, 50, 4e3, 2500)
NP_EVAL2 <- switch(RUN_LEVEL, 50, 4e3, 3000)
NP_EVAL3 <- switch(RUN_LEVEL, 50, 4e3, 3500)
# STEP 1: Global all ------------------------------------------------------
SIRB_panel <- haiti3_panel(start_time = "2010-10-23")
# Smallest value positive parameters will start at
min_param_val <- 5e-8
unit_bounds <- tribble(
~param, ~lower, ~upper,
"betaB", min_param_val, 20,
"foi_add", min_param_val, 1e-5
)
original_unit <- SIRB_panel@specific
fixed_unit <- SIRB_panel@specific[c('H', 'D'), ]
shared_params <- SIRB_panel@shared
deps <- colnames(original_unit)
# From the table above, create lower and upper bounds for each parameter
lb_unit <- unlist(unit_bounds[, 'lower'])
names(lb_unit) <- unlist(unit_bounds[, 'param'], use.names = FALSE)
ub_unit <- unlist(unit_bounds[, 'upper'])
names(ub_unit) <- unlist(unit_bounds[, 'param'], use.names = FALSE)
set.seed(3178689)
guesses_unit <- runif_design(
lower = lb_unit,
upper = ub_unit,
nseq = (NREPS_GLOBAL - 1) * 10
)
guess_list_unit <- list()
for (i in 1:(NREPS_GLOBAL - 1)) {
Betas <- guesses_unit$betaB[(10 * i - 9):(10 * i)]
Fois <- guesses_unit$foi_add[(10 * i - 9):(10 * i)]
params <- rbind(Betas, Fois)
colnames(params) <- deps
rownames(params) <- c('betaB', 'foi_add')
params <- rbind(params, fixed_unit)
guess_list_unit[[i]] <- params
}
guess_list_unit[[NREPS_GLOBAL]] <- original_unit
# Table copied from run_mif_haitiOCV.R, but bounds where changed a bit
parameter_bounds <- tribble(
~param, ~lower, ~upper,
"mu_B", 25, 250,
"XthetaA", min_param_val, 0.6,
"thetaI", min_param_val, 5e-3,
"lambdaR", min_param_val, 5,
"r", min_param_val, 2,
"std_W", min_param_val, 0.15,
"epsilon", .25, 1,
"k", 10, 1000,# hard to get negbin like this, sobol in log scale -5 et 4 TODO IF ENABLE: UNCOMMENT ID2314
"sigma", 0.01, 0.5
)
original_fixed_shared <- SIRB_panel@shared[names(SIRB_panel@shared) %in% parameter_bounds$param]
fixed_shared <- SIRB_panel@shared[!names(SIRB_panel@shared) %in% parameter_bounds$param]
fixed_shared['cas_def'] <- 1
# All parameters are fixed that aren't in the table above
# fixed_params <- sirb_cholera@params[!names(sirb_cholera@params) %in% parameter_bounds$param]
# From the table above, create lower and upper bounds for each parameter
lb <- unlist(parameter_bounds[, 'lower'], use.names = FALSE)
names(lb) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
ub <- unlist(parameter_bounds[, 'upper'], use.names = FALSE)
names(ub) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
# Using the bounds defined above, create a grid of parameters
# to search globally.
set.seed(7869381)
guesses <- runif_design(
lower = lb,
upper = ub,
nseq = NREPS_GLOBAL - 1
)
guesses <- rbind(guesses, original_fixed_shared[colnames(guesses)])
chol_rw <- rw.sd(
betaB = 0.02,
mu_B = 0.02,
thetaI = 0.02,
XthetaA = 0.02,
lambdaR = 0.02,
r = 0.02,
std_W = 0.02,
epsilon = 0.02,
k = 0.02,
sigma = 0.02,
foi_add = 0.02
)
# Get all of the cores available.
registerDoRNG(1851563)
cat('\nStarting Global Search...\n')
# Global MIF at "MLE"
stew(file = 'output/no_trend_global.rda', {
t2 <- system.time({
# Run global MIF chol_Nreps_global times
foreach(
i=1:NREPS_GLOBAL,
.packages = c('panelPomp'),
.combine = c
) %dopar% {
r_shared_params <- unlist(guesses[i, ])
r_unit_params <- guess_list_unit[[i]]
mif2(
SIRB_panel,
Np = NP,
Nmif = NMIF,
cooling.fraction.50 = 0.5,
rw.sd = chol_rw,
cooling.type = 'geometric',
shared.start = c(fixed_shared, r_shared_params),
specific.start = r_unit_params,
block = TRUE
)
} -> no_trend_global
})
})
cat('Finished!\n\n')
print(t2)
# Just removing everything so that there is no issue with renaming stuff,
# and so that we are being a bit more memory efficient.
rm(
chol_rw, fixed_unit, guess_list_unit, guesses, guesses_unit, original_unit,
parameter_bounds, params, unit_bounds, Betas, fixed_shared, Fois, i, lb,
lb_unit, original_fixed_shared, shared_params, ub, ub_unit, t2
)
gc()
# Step 1.5: PFilter results -----------------------------------------------
cat('\nPFiltering Global All...\n')
mif_logLik <- data.frame(
'logLik' = rep(0, length(no_trend_global)),
'se' = rep(0, length(no_trend_global)),
'which' = 1:length(no_trend_global)
)
mif_results <- foreach(i=1:length(no_trend_global)) %do% {
mf <- no_trend_global[[i]]
list(logLik = logLik(mf), params = coef(mf))
}
for (j in 1:length(no_trend_global)) {
mf <- no_trend_global[[j]]
mif_params <- mif_results[[j]]$params
# registerDoParallel(36)
registerDoRNG((j * 38763911) %% 7919)
library(tictoc)
tic()
pf3_loglik_matrix <- foreach(i=1:NREPS_EVAL, .combine = rbind) %dopar% {
library(panelPomp)
unitlogLik(pfilter(mf, params = mif_params, Np = NP_EVAL1))
}
toc()
mif_logLik[mif_logLik$which == j, 1:2] <- panel_logmeanexp(pf3_loglik_matrix, MARGIN = 2, se = TRUE)
}
cat('Finished!\n\n')
save(mif_logLik, file = 'output/no_trend_global_PF.rda')
rm(
i, j, mf, mif_params, mif_results, pf3_loglik_matrix
)
gc()
cat('Starting Global Search of Shared...\n')
best_m <- mif_logLik %>%
arrange(-logLik) %>%
slice_head(n = 1) %>%
pull(which)
params_shared <- no_trend_global[[best_m]]@shared
params_unit <- no_trend_global[[best_m]]@specific
rm(no_trend_global)
gc()
# Table copied from run_mif_haitiOCV.R, but bounds where changed a bit
parameter_bounds <- tribble(
~param, ~lower, ~upper,
"mu_B", 20, 200,
"XthetaA", min_param_val, 1,
"thetaI", min_param_val, 5e-04,
"lambdaR", min_param_val, 10,
"r", min_param_val, 5e3,
"std_W", min_param_val, 0.9,
"epsilon", .25, 1,
"k", 10, 1000
)
original_fixed_shared <- params_shared[names(params_shared) %in% parameter_bounds$param]
fixed_shared <- params_shared[!names(params_shared) %in% parameter_bounds$param]
# From the table above, create lower and upper bounds for each parameter
lb <- unlist(parameter_bounds[, 'lower'])
names(lb) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
ub <- unlist(parameter_bounds[, 'upper'])
names(ub) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
# Using the bounds defined above, create a grid of parameters
# to search globally.
set.seed(17839)
guesses <- runif_design(
lower = lb,
upper = ub,
nseq = NREPS_LOCAL - 1
)
guesses <- rbind(guesses, original_fixed_shared)
guesses
chol_rw <- rw.sd(
mu_B = 0.02,
thetaI = 0.02,
XthetaA = 0.02,
lambdaR = 0.02,
r = 0.02,
std_W = 0.02,
epsilon = 0.02,
k = 0.02
)
# Get all of the cores available.
registerDoRNG(3481569)
fixed_shared
params_shared
# Table copied from run_mif_haitiOCV.R, but bounds where changed a bit
parameter_bounds <- tribble(
~param, ~lower, ~upper,
"mu_B", 20, 200,
"XthetaA", min_param_val, 1,
"thetaI", min_param_val, 5e-04,
"lambdaR", min_param_val, 10,
"r", min_param_val, 5e3,
"std_W", min_param_val, 0.9,
"epsilon", .25, 1,
"sigma", 0.05, 0.4,
"k", 10, 1000
)
original_fixed_shared <- params_shared[names(params_shared) %in% parameter_bounds$param]
fixed_shared <- params_shared[!names(params_shared) %in% parameter_bounds$param]
fixed_shared
# From the table above, create lower and upper bounds for each parameter
lb <- unlist(parameter_bounds[, 'lower'])
names(lb) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
ub <- unlist(parameter_bounds[, 'upper'])
names(ub) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
# Using the bounds defined above, create a grid of parameters
# to search globally.
set.seed(17839)
guesses <- runif_design(
lower = lb,
upper = ub,
nseq = NREPS_LOCAL - 1
)
guesses <- rbind(guesses, original_fixed_shared)
chol_rw <- rw.sd(
mu_B = 0.02,
thetaI = 0.02,
XthetaA = 0.02,
lambdaR = 0.02,
r = 0.02,
std_W = 0.02,
epsilon = 0.02,
sigma = 0.02,
k = 0.02
)
registerDoRNG(3481569)
# Local MIF at "MLE"
stew(file = 'output/no_trend_shared.rda', {
t2 <- system.time({
# Run local MIF chol_Nreps_local times
foreach(
guess=iter(guesses, 'row'),
.packages = c('panelPomp'),
.combine = c
) %dopar% {
r_shared_params <- unlist(guess)
mif2(
SIRB_panel,
Np = NP,
Nmif = NMIF,
cooling.fraction.50 = 0.5,
rw.sd = chol_rw,
cooling.type = 'geometric',
shared.start = c(fixed_shared, r_shared_params),
specific.start = params_unit
)
} -> no_trend_shared
})
})
cat("Finished! \n\n")
print(t2)
original_fixed_shared <- params_shared[names(params_shared) %in% parameter_bounds$param]
original_fixed_shared
# Table copied from run_mif_haitiOCV.R, but bounds where changed a bit
parameter_bounds <- tribble(
~param, ~lower, ~upper,
"mu_B", 20, 200,
"XthetaA", min_param_val, 1,
"thetaI", min_param_val, 5e-04,
"lambdaR", min_param_val, 10,
"r", min_param_val, 5e3,
"std_W", min_param_val, 0.9,
"epsilon", .25, 1,
"k", 10, 1000
)
original_fixed_shared <- params_shared[names(params_shared) %in% parameter_bounds$param]
original_fixed_shared
fixed_shared
fixed_shared <- params_shared[!names(params_shared) %in% parameter_bounds$param]
fixed_shared
# Table copied from run_mif_haitiOCV.R, but bounds where changed a bit
parameter_bounds <- tribble(
~param, ~lower, ~upper,
"mu_B", 20, 200,
"XthetaA", min_param_val, 1,
"thetaI", min_param_val, 5e-04,
"lambdaR", min_param_val, 10,
"r", min_param_val, 5e3,
"std_W", min_param_val, 0.9,
"epsilon", .25, 1,
"k", 10, 1000
)
original_fixed_shared <- params_shared[names(params_shared) %in% parameter_bounds$param]
fixed_shared <- params_shared[!names(params_shared) %in% parameter_bounds$param]
# From the table above, create lower and upper bounds for each parameter
lb <- unlist(parameter_bounds[, 'lower'])
names(lb) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
ub <- unlist(parameter_bounds[, 'upper'])
names(ub) <- unlist(parameter_bounds[, 'param'], use.names = FALSE)
# Using the bounds defined above, create a grid of parameters
# to search globally.
set.seed(17839)
guesses <- runif_design(
lower = lb,
upper = ub,
nseq = NREPS_LOCAL - 1
)
guesses <- rbind(guesses, original_fixed_shared)
guesses
chol_rw <- rw.sd(
mu_B = 0.02,
thetaI = 0.02,
XthetaA = 0.02,
lambdaR = 0.02,
r = 0.02,
std_W = 0.02,
epsilon = 0.02,
sigma = 0.02,
k = 0.02
)
registerDoRNG(3481569)
# Local MIF at "MLE"
stew(file = 'output/no_trend_shared.rda', {
t2 <- system.time({
# Run local MIF chol_Nreps_local times
foreach(
guess=iter(guesses, 'row'),
.packages = c('panelPomp'),
.combine = c
) %dopar% {
r_shared_params <- unlist(guess)
mif2(
SIRB_panel,
Np = NP,
Nmif = NMIF,
cooling.fraction.50 = 0.5,
rw.sd = chol_rw,
cooling.type = 'geometric',
shared.start = c(fixed_shared, r_shared_params),
specific.start = params_unit
)
} -> no_trend_shared
})
})
cat("Finished! \n\n")
print(t2)
# Just removing everything so that there is no issue with renaming stuff,
# and so that we are being a bit more memory efficient.
rm(
chol_rw, guesses, parameter_bounds, params_unit, best_m, fixed_shared, lb,
up, t2, params_shared, original_fixed_shared
)
# Just removing everything so that there is no issue with renaming stuff,
# and so that we are being a bit more memory efficient.
rm(
chol_rw, guesses, parameter_bounds, params_unit, best_m, fixed_shared, lb,
ub, t2, params_shared, original_fixed_shared
)
gc()
rm(no_trend_global, mif_logLik)
gc()
cat('\nPFiltering Global Shared...\n')
mif_logLik <- data.frame(
'logLik' = rep(0, length(no_trend_shared)),
'se' = rep(0, length(no_trend_shared)),
'which' = 1:length(no_trend_shared)
)
mif_results <- foreach(i=1:length(no_trend_shared)) %do% {
mf <- no_trend_shared[[i]]
list(logLik = logLik(mf), params = coef(mf))
}
for (j in 1:length(no_trend_shared)) {
mf <- no_trend_shared[[j]]
mif_params <- mif_results[[j]]$params
# registerDoParallel(36)
registerDoRNG((j * 38763911) %% 7919)
library(tictoc)
tic()
pf3_loglik_matrix <- foreach(i=1:NREPS_EVAL, .combine = rbind) %dopar% {
library(panelPomp)
unitlogLik(pfilter(mf, params = mif_params, Np = NP_EVAL1))
}
toc()
mif_logLik[mif_logLik$which == j, 1:2] <- panel_logmeanexp(pf3_loglik_matrix, MARGIN = 2, se = TRUE)
}
cat('Finished!\n\n')
save(mif_logLik, file = 'output/no_trend_shared_PF.rda')
rm(
i, j, mf, mif_params, mif_results, pf3_loglik_matrix
)
gc()
params_shared <- no_trend_shared[[which.max(mif_logLik$logLik)]]@shared
params_unit <- no_trend_shared[[which.max(mif_logLik$logLik)]]@specific
cat('Starting Local Search of Unit params...\n')
params_shared <- no_trend_shared[[which.max(mif_logLik$logLik)]]@shared
params_unit <- no_trend_shared[[which.max(mif_logLik$logLik)]]@specific
rm(no_trend_shared, mif_logLik)
gc()
chol_rw <- rw.sd(
betaB = 0.02,
foi_add = 0.02
)
# Get all of the cores available.
registerDoRNG(40765101)
# Local MIF at "MLE"
stew(file = 'output/no_trend_local.rda', {
t2 <- system.time({
# Run local MIF chol_Nreps_local times
foreach(
i=1:chol_Nreps_local,
.packages = c('panelPomp'),
.combine = c
) %dopar% {
mif2(
SIRB_panel,
Np = NP,
Nmif = NMIF,
cooling.fraction.50 = 0.5,
rw.sd = chol_rw,
cooling.type = 'geometric',
shared.start = params_shared,
specific.start = params_unit,
block = TRUE
)
} -> no_trend_local
})
})
# Local MIF at "MLE"
stew(file = 'output/no_trend_local.rda', {
t2 <- system.time({
# Run local MIF chol_Nreps_local times
foreach(
i=1:NREPS_LOCAL,
.packages = c('panelPomp'),
.combine = c
) %dopar% {
mif2(
SIRB_panel,
Np = NP,
Nmif = NMIF,
cooling.fraction.50 = 0.5,
rw.sd = chol_rw,
cooling.type = 'geometric',
shared.start = params_shared,
specific.start = params_unit,
block = TRUE
)
} -> no_trend_local
})
})
cat("Finished! \n\n")
print(t2)
cat('\nPFiltering Local Unit...\n')
mif_logLik <- data.frame(
'logLik' = rep(0, length(no_trend_local)),
'se' = rep(0, length(no_trend_local)),
'which' = 1:length(no_trend_local)
)
mif_results <- foreach(i=1:length(no_trend_local)) %do% {
mf <- no_trend_local[[i]]
list(logLik = logLik(mf), params = coef(mf))
}
for (j in 1:length(no_trend_local)) {
mf <- no_trend_local[[j]]
mif_params <- mif_results[[j]]$params
# registerDoParallel(36)
registerDoRNG((j * 38763911) %% 7919)
library(tictoc)
tic()
pf3_loglik_matrix <- foreach(i=1:NREPS_EVAL, .combine = rbind) %dopar% {
library(panelPomp)
unitlogLik(pfilter(mf, params = mif_params, Np = NP_EVAL2))
}
toc()
mif_logLik[mif_logLik$which == j, 1:2] <- panel_logmeanexp(pf3_loglik_matrix, MARGIN = 2, se = TRUE)
}
best_m <- mif_logLik %>%
arrange(-logLik) %>%
slice_head(n = 1) %>%
pull(which)
best_m
mif_logLik
no_trend_locl[[best_m]]
no_trend_local[[best_m]]
coef(no_trend_local[[best_m]])
source("~/Documents/research/haiti/model3/scripts/all_time_no_trend.R")
mif_logLik
best_params
6.5 + 5.5
12 * 4
24 * 3
setwd("~/Documents/research/haitipkg")
setwd("~/Documents/Fall2021/604labs/lab4")
