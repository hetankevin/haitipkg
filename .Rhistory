else if (t_since_vacc <=  11./12) eff_v_2d =  0.690903378326535;
else if (t_since_vacc <=  12./12) eff_v_2d =  0.683433215444227;
else if (t_since_vacc <=  13./12) eff_v_2d =  0.675855195064453;
else if (t_since_vacc <=  14./12) eff_v_2d =  0.668167759893222;
else if (t_since_vacc <=  15./12) eff_v_2d =  0.660369330151649;
else if (t_since_vacc <=  16./12) eff_v_2d =  0.652458303251305;
else if (t_since_vacc <=  17./12) eff_v_2d =  0.644433053464886;
else if (t_since_vacc <=  18./12) eff_v_2d =  0.636291931592122;
else if (t_since_vacc <=  19./12) eff_v_2d =  0.628033264620864;
else if (t_since_vacc <=  20./12) eff_v_2d =  0.619655355383277;
else if (t_since_vacc <=  21./12) eff_v_2d =  0.61115648220707 ;
else if (t_since_vacc <=  22./12) eff_v_2d =  0.602534898561692;
else if (t_since_vacc <=  23./12) eff_v_2d =  0.593788832699414;
else if (t_since_vacc <=  24./12) eff_v_2d =  0.584916487291234;
else if (t_since_vacc <=  25./12) eff_v_2d =  0.575916039057525;
else if (t_since_vacc <=  26./12) eff_v_2d =  0.566785638393345;
else if (t_since_vacc <=  27./12) eff_v_2d =  0.557523408988343;
else if (t_since_vacc <=  28./12) eff_v_2d =  0.548127447441173;
else if (t_since_vacc <=  29./12) eff_v_2d =  0.538595822868346;
else if (t_since_vacc <=  30./12) eff_v_2d =  0.528926576507423;
else if (t_since_vacc <=  31./12) eff_v_2d =  0.519117721314497;
else if (t_since_vacc <=  32./12) eff_v_2d =  0.509167241555842;
else if (t_since_vacc <=  33./12) eff_v_2d =  0.499073092393685;
else if (t_since_vacc <=  34./12) eff_v_2d =  0.488833199465984;
else if (t_since_vacc <=  35./12) eff_v_2d =  0.478445458460148;
else if (t_since_vacc <=  36./12) eff_v_2d =  0.467907734680592;
else if (t_since_vacc <=  37./12) eff_v_2d =  0.457217862610059;
else if (t_since_vacc <=  38./12) eff_v_2d =  0.446373645464601;
else if (t_since_vacc <=  39./12) eff_v_2d =  0.435372854742138;
else if (t_since_vacc <=  40./12) eff_v_2d =  0.424213229764494;
else if (t_since_vacc <=  41./12) eff_v_2d =  0.412892477212831;
else if (t_since_vacc <=  42./12) eff_v_2d =  0.401408270656362;
else if (t_since_vacc <=  43./12) eff_v_2d =  0.38975825007427  ;
else if (t_since_vacc <=  44./12) eff_v_2d =  0.377940021370718;
else if (t_since_vacc <=  45./12) eff_v_2d =  0.365951155882864;
else if (t_since_vacc <=  46./12) eff_v_2d =  0.353789189881759;
else if (t_since_vacc <=  47./12) eff_v_2d =  0.341451624066056;
else if (t_since_vacc <=  48./12) eff_v_2d =  0.328935923048392;
else if (t_since_vacc <=  49./12) eff_v_2d =  0.316239514834368;
else if (t_since_vacc <=  50./12) eff_v_2d =  0.303359790293999;
else if (t_since_vacc <=  51./12) eff_v_2d =  0.290294102625533;
else if (t_since_vacc <=  52./12) eff_v_2d =  0.27703976681153  ;
else if (t_since_vacc <=  53./12) eff_v_2d =  0.263594059067087;
else if (t_since_vacc <=  54./12) eff_v_2d =  0.249954216280098;
else if (t_since_vacc <=  55./12) eff_v_2d =  0.236117435443426;
else if (t_since_vacc <=  56./12) eff_v_2d =  0.222080873078887;
else if (t_since_vacc <=  57./12) eff_v_2d =  0.207841644652907;
else if (t_since_vacc <=  58./12) eff_v_2d =  0.193396823983748;
else if (t_since_vacc <=  59./12) eff_v_2d =  0.178743442640173;
else if (t_since_vacc <=  60./12) eff_v_2d = 0.163878489331427;
else if (t_since_vacc <=  61./12) eff_v_2d =  0.148798909288418;
break;
case 2:
eff_v_2d = 0.76;
break;
case 3:
if      (t_since_vacc <=   1./12) eff_v_2d = 0.62899141753524;
else if (t_since_vacc <=   2./12) eff_v_2d = 0.62363463243243;
else if (t_since_vacc <=   3./12) eff_v_2d = 0.61820050371012;
else if (t_since_vacc <=   4./12) eff_v_2d = 0.61268791464710;
else if (t_since_vacc <=   5./12) eff_v_2d = 0.60709573239845;
else if (t_since_vacc <=   6./12) eff_v_2d = 0.60142280776277;
else if (t_since_vacc <=   7./12) eff_v_2d = 0.59566797494594;
else if (t_since_vacc <=   8./12) eff_v_2d = 0.58983005132162;
else if (t_since_vacc <=   9./12) eff_v_2d = 0.58390783718819;
else if (t_since_vacc <=  10./12) eff_v_2d = 0.57790011552220;
else if (t_since_vacc <=  11./12) eff_v_2d = 0.57180565172828;
else if (t_since_vacc <=  12./12) eff_v_2d = 0.56562319338543;
else if (t_since_vacc <=  13./12) eff_v_2d = 0.55935146998966;
else if (t_since_vacc <=  14./12) eff_v_2d = 0.55298919269287;
else if (t_since_vacc <=  15./12) eff_v_2d = 0.54653505403800;
else if (t_since_vacc <=  16./12) eff_v_2d = 0.53998772769036;
else if (t_since_vacc <=  17./12) eff_v_2d = 0.53334586816505;
else if (t_since_vacc <=  18./12) eff_v_2d = 0.52660811055048;
else if (t_since_vacc <=  19./12) eff_v_2d = 0.51977307022784;
else if (t_since_vacc <=  20./12) eff_v_2d = 0.51283934258662;
else if (t_since_vacc <=  21./12) eff_v_2d = 0.50580550273589;
else if (t_since_vacc <=  22./12) eff_v_2d = 0.49867010521154;
else if (t_since_vacc <=  23./12) eff_v_2d = 0.49143168367921;
else if (t_since_vacc <=  24./12) eff_v_2d = 0.48408875063295;
else if (t_since_vacc <=  25./12) eff_v_2d = 0.47663979708957;
else if (t_since_vacc <=  26./12) eff_v_2d = 0.46908329227848;
else if (t_since_vacc <=  27./12) eff_v_2d = 0.46141768332718;
else if (t_since_vacc <=  28./12) eff_v_2d = 0.45364139494210;
else if (t_since_vacc <=  29./12) eff_v_2d = 0.44575282908489;
else if (t_since_vacc <=  30./12) eff_v_2d = 0.43775036464403;
else if (t_since_vacc <=  31./12) eff_v_2d = 0.42963235710167;
else if (t_since_vacc <=  32./12) eff_v_2d = 0.42139713819568;
else if (t_since_vacc <=  33./12) eff_v_2d = 0.41304301557684;
else if (t_since_vacc <=  34./12) eff_v_2d = 0.40456827246104;
else if (t_since_vacc <=  35./12) eff_v_2d = 0.39597116727650;
else if (t_since_vacc <=  36./12) eff_v_2d = 0.38724993330585;
else if (t_since_vacc <=  37./12) eff_v_2d = 0.37840277832307;
else if (t_since_vacc <=  38./12) eff_v_2d = 0.36942788422520;
else if (t_since_vacc <=  39./12) eff_v_2d = 0.36032340665871;
else if (t_since_vacc <=  40./12) eff_v_2d = 0.35108747464049;
else if (t_since_vacc <=  41./12) eff_v_2d = 0.34171819017333;
else if (t_since_vacc <=  42./12) eff_v_2d = 0.33221362785594;
else if (t_since_vacc <=  43./12) eff_v_2d = 0.32257183448719;
else if (t_since_vacc <=  44./12) eff_v_2d = 0.31279082866482;
else if (t_since_vacc <=  45./12) eff_v_2d = 0.30286860037818;
else if (t_since_vacc <=  46./12) eff_v_2d = 0.29280311059522;
else if (t_since_vacc <=  47./12) eff_v_2d = 0.28259229084344;
else if (t_since_vacc <=  48./12) eff_v_2d = 0.27223404278483;
else if (t_since_vacc <=  49./12) eff_v_2d = 0.26172623778464;
else if (t_since_vacc <=  50./12) eff_v_2d = 0.25106671647396;
else if (t_since_vacc <=  51./12) eff_v_2d = 0.24025328830599;
else if (t_since_vacc <=  52./12) eff_v_2d = 0.22928373110581;
else if (t_since_vacc <=  53./12) eff_v_2d = 0.21815579061378;
else if (t_since_vacc <=  54./12) eff_v_2d = 0.20686718002227;
else if (t_since_vacc <=  55./12) eff_v_2d = 0.19541557950571;
else if (t_since_vacc <=  56./12) eff_v_2d = 0.18379863574388;
else if (t_since_vacc <=  57./12) eff_v_2d = 0.17201396143827;
else if (t_since_vacc <=  58./12) eff_v_2d = 0.16005913482151;
else if (t_since_vacc <=  59./12) eff_v_2d = 0.14793169915969;
else if (t_since_vacc <=  60./12) eff_v_2d = 0.13562916224751;
else if (t_since_vacc <=  61./12) eff_v_2d = 0.12314899589607;
break;
}
if (t_since_vacc >  61./12)
eff_v_2d =  0.0;
return eff_v_2d * (1-(1-0.4688)*0.11) ; /* 11 % of U5 person have VE as 0.4688*VE_adult */
}  double eff_v_1d(double t_since_vacc, int scenario) {
if (t_since_vacc < 1)
return eff_v_2d(t_since_vacc, scenario);
else
return 0;
};"
populations  <- unlist(purrr::flatten(input_parameters["population"]))
densities <- unlist(purrr::flatten(input_parameters["density"]))
p1d_alt_year  <- unlist(purrr::flatten(input_parameters["p1d_alt_year"]))
nb_doses_alt_year <- unlist(purrr::flatten(input_parameters["nb_doses_alt_year"]))
t_vacc_start_alt  <- unlist(purrr::flatten(input_parameters["t_vacc_start_alt"]))
t_vacc_end_alt <- unlist(purrr::flatten(input_parameters["t_vacc_end_alt"]))
t_vacc_start_alt = dateToYears(as.Date(t_vacc_start_alt[departement]))
t_vacc_end_alt   = dateToYears(as.Date(t_vacc_end_alt[departement]))
r_v_alt_year = nb_doses_alt_year[departement]/(t_vacc_end_alt - t_vacc_start_alt)
p1d_alt = p1d_alt_year[departement]
cases_ext_mean <- cases_other_dept %>% filter(time > t_start)
cases_ext_mean <- cases_other_dept %>% dplyr::filter(time > t_start)
library(haitipkg)
haiti3_dep()
library(haitipkg)
haiti3_dep()
library(devtools)
document()
library(haitipkg)
haiti3_dep()
}
library(haitipkg)
mod <- haiti3_dep()
library(pomp)
simulate(mod, 1)
mod <- haiti3_dep('Oueste')
mod <- haiti3_dep('Ouest')
mod <- haiti3_dep('Sud')
simulate(mod)
library(haitipkg)
mod <- haiti3_dep()
mod@params
getwd()
dir.create('TestDir')
library(pomp)
library(haitipkg)
library(foreach)
library(doParallel)
library(doRNG)
library(tidyverse)
as.numeric(dep)
dep
dep <- "Artibonite"
as.numeric(dep)
install.packages('TeachingDemos')
View(TeachingDemos::char2seed)
char2seed('Artibonite')
TeachingDemoschar2seed('Artibonite')
TeachingDemos::char2seed('Artibonite')
TeachingDemos::char2seed('Artibonite', set = FALSE)
TeachingDemos::char2seed('artibonite', set = FALSE)
paste0('output/', dep, '/mif_global.rda')
library(pomp)
sirb_cholera <- haiti3_dep(departement = dep)
coef(sirb_cholera)
coef(sirb_cholera)[-c('betaB', 'foi_add')]
coef(sirb_cholera)[c('betaB', 'foi_add')]
coef(sirb_cholera)[-'betaB']
coef(sirb_cholera)[coef(sirb_cholera) %in% c('betaB')]
coef(sirb_cholera)[names(coef(sirb_cholera)) %in% c('betaB')]
coef(sirb_cholera)[!names(coef(sirb_cholera)) %in% c('betaB', 'foi_add')]
fixed_params <- coef(sirb_cholera)[!names(coef(sirb_cholera)) %in% c('betaB', 'foi_add')]
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global
)
library(pomp)
library(haitipkg)
library(foreach)
library(doParallel)
library(doRNG)
library(tidyverse)
args <- commandArgs(trailingOnly = TRUE)
dep <- args[1]
cores <-  as.numeric(Sys.getenv('SLURM_NTASKS_PER_NODE', unset=NA))
if(is.na(cores)) cores <- 16
registerDoParallel(cores)
# Set Run Level for debug, timing, and full computation
RUN_LEVEL = 1
chol_Np <-           switch(RUN_LEVEL, 50, 1e3, 4e3)  # Number of particle filters
chol_Nmif <-         switch(RUN_LEVEL,  5, 100, 200)  # Number of MIF iterations
chol_Nreps_eval <-   switch(RUN_LEVEL,  2,  10,  20)  # Number of times pfilter will be run to estimate likelihood
chol_Nreps_global <-  switch(RUN_LEVEL,  5,  20,  36)  # Number of times to run MIF at "MLE"
sirb_cholera <- haiti3_dep(departement = dep)
dep
dep = 'Nord'
sirb_cholera <- haiti3_dep(departement = dep)
chol_rw <- rw.sd(
betaB = 0.02, foi_add = 0.0
)
registerDoRNG(TeachingDemos::char2seed(dep, set = FALSE))
fixed_params <- coef(sirb_cholera)[!names(coef(sirb_cholera)) %in% c('betaB', 'foi_add')]
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global
)
fixed_params
cbind(guesses, fixed_params)
head(guesses)
guesses[, 3:length(fixed_params)]
guesses[, 3:(length(fixed_params)+2)] <- fixed_params
guesses
fixed_params
length(fixed_params)
ncol(guesses)
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global
)
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global
)
for (parm in names(fixed_params)) {
guesses[, parm] <- fixed_params[parm]
}
guesses
library(pomp)
library(haitipkg)
library(foreach)
library(doParallel)
library(doRNG)
library(tidyverse)
args <- commandArgs(trailingOnly = TRUE)
dep <- args[1]
cores <-  as.numeric(Sys.getenv('SLURM_NTASKS_PER_NODE', unset=NA))
if(is.na(cores)) cores <- 16
registerDoParallel(cores)
# Set Run Level for debug, timing, and full computation
RUN_LEVEL = 1
chol_Np <-           switch(RUN_LEVEL, 50, 1e3, 4e3)  # Number of particle filters
chol_Nmif <-         switch(RUN_LEVEL,  5, 100, 200)  # Number of MIF iterations
chol_Nreps_eval <-   switch(RUN_LEVEL,  2,  10,  20)  # Number of times pfilter will be run to estimate likelihood
chol_Nreps_global <-  switch(RUN_LEVEL,  5,  20,  36)  # Number of times to run MIF at "MLE"
sirb_cholera <- haiti3_dep(departement = dep)
chol_rw <- rw.sd(
betaB = 0.02, foi_add = 0.0
)
dep = 'Nord'
sirb_cholera <- haiti3_dep(departement = dep)
chol_rw <- rw.sd(
betaB = 0.02, foi_add = 0.0
)
registerDoRNG(TeachingDemos::char2seed(dep, set = FALSE))
fixed_params <- coef(sirb_cholera)[!names(coef(sirb_cholera)) %in% c('betaB', 'foi_add')]
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global-1
)
for (parm in names(fixed_params)) {
guesses[, parm] <- fixed_params[parm]
}
rbind(guesses, coef(sirb_cholera))
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global-1
)
class(guesses)
for (parm in names(fixed_params)) {
guesses[, parm] <- fixed_params[parm]
}
class(guesses)
as.data.frame(coef(sirb_cholera))
as.data.frame(t(coef(sirb_cholera)))
guesses <- rbind(guesses, as.data.frame(t(coef(sirb_cholera))))
guesses
??iter
?iter
library(pomp)
library(haitipkg)
library(foreach)
library(doParallel)
library(doRNG)
library(tidyverse)
iter
library(pomp)
library(haitipkg)
library(foreach)
library(doParallel)
library(doRNG)
library(tidyverse)
args <- commandArgs(trailingOnly = TRUE)
dep <- args[1]
cores <-  as.numeric(Sys.getenv('SLURM_NTASKS_PER_NODE', unset=NA))
if(is.na(cores)) cores <- 16
registerDoParallel(cores)
# Set Run Level for debug, timing, and full computation
RUN_LEVEL = 1
chol_Np <-           switch(RUN_LEVEL, 50, 1e3, 4e3)  # Number of particle filters
chol_Nmif <-         switch(RUN_LEVEL,  5, 100, 200)  # Number of MIF iterations
chol_Nreps_eval <-   switch(RUN_LEVEL,  2,  10,  20)  # Number of times pfilter will be run to estimate likelihood
chol_Nreps_global <-  switch(RUN_LEVEL,  5,  20,  36)  # Number of times to run MIF at "MLE"
sirb_cholera <- haiti3_dep(departement = dep)
dep = 'Ouest'
sirb_cholera <- haiti3_dep(departement = dep)
chol_rw <- rw.sd(
betaB = 0.02, foi_add = 0.02
)
registerDoRNG(TeachingDemos::char2seed(dep, set = FALSE))
fixed_params <- coef(sirb_cholera)[!names(coef(sirb_cholera)) %in% c('betaB', 'foi_add')]
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global-1
)
for (parm in names(fixed_params)) {
guesses[, parm] <- fixed_params[parm]
}
guesses <- rbind(guesses, as.data.frame(t(coef(sirb_cholera))))
colnames(guesses)
setwd("~/Documents/GitHub/haiti/model3/scripts")
setwd("~/Documents/GitHub/haiti/model3")
# Loading the necessary libraries
library(tidyverse)
# library(doParallel)
library(foreach)
library(pomp)
# library(doRNG)
library(tictoc)
load('output/Ouest/mif_global.rda')
r2 <- data.frame(logLik=lik_m2[,1],logLik_se=lik_m2[,2],
t(sapply(m2,coef)))
library(dplyr)
r2 %>%
arrange(-logLik)
m2 %>%
traces() %>%
melt() %>%
ggplot(aes(x=iteration,y=value,group=L1,color=factor(L1)))+
geom_line()+
guides(color=FALSE)+
facet_wrap(~variable,scales="free_y")
lik_m2
r2 <- data.frame(logLik=lik_m2[,1],logLik_se=lik_m2[,2],
t(sapply(m2,coef)))
r2
r2 %>%
arrange(-logLik)
r2 <- data.frame(logLik=lik_m2[,1],logLik_se=lik_m2[,2],
t(sapply(m2,coef)))
r2 <- data.frame(logLik=lik_m2[,1],logLik_se=lik_m2[,2],
t(sapply(m2,coef))) %>%
arrange(-logLik)
r2
library(pomp)
library(haitipkg)
library(foreach)
library(doParallel)
library(doRNG)
library(tidyverse)
args <- commandArgs(trailingOnly = TRUE)
dep <- args[1]
cores <-  as.numeric(Sys.getenv('SLURM_NTASKS_PER_NODE', unset=NA))
if(is.na(cores)) cores <- 16
registerDoParallel(cores)
# Set Run Level for debug, timing, and full computation
RUN_LEVEL = 1
chol_Np <-           switch(RUN_LEVEL, 50, 1e3, 4e3)  # Number of particle filters
chol_Nmif <-         switch(RUN_LEVEL,  5, 100, 200)  # Number of MIF iterations
chol_Nreps_eval <-   switch(RUN_LEVEL,  2,  10,  20)  # Number of times pfilter will be run to estimate likelihood
chol_Nreps_global <-  switch(RUN_LEVEL,  5,  20,  36)  # Number of times to run MIF at "MLE"
sirb_cholera <- haiti3_dep(departement = dep)
chol_rw <- rw.sd(
betaB = 0.02, foi_add = 0.02
)
registerDoRNG(TeachingDemos::char2seed(dep, set = FALSE))
dep = 'Ouest'
sirb_cholera <- haiti3_dep(departement = dep)
chol_rw <- rw.sd(
betaB = 0.02, foi_add = 0.02
)
registerDoRNG(TeachingDemos::char2seed(dep, set = FALSE))
fixed_params <- coef(sirb_cholera)[!names(coef(sirb_cholera)) %in% c('betaB', 'foi_add')]
guesses <- runif_design(
lower = c('betaB' = 5e-8, 'foi_add' = 5e-8),
upper = c('betaB' = 5, 'foi_add' = 5e-5),
nseq = chol_Nreps_global-1
)
for (parm in names(fixed_params)) {
guesses[, parm] <- fixed_params[parm]
}
guesses <- rbind(guesses, as.data.frame(t(coef(sirb_cholera))))
# Local MIF at "MLE"
stew(file = paste0('output/', dep, '/mif_global.rda'), {
sirb_cholera_temp <- sirb_cholera
t2 <- system.time({
# Run local MIF chol_Nreps_local times
foreach(
guess=iter(guesses, 'row'),
.packages = c('pomp'),
.combine = c
) %dopar% {
mif2(
sirb_cholera,
Np = chol_Np,
Nmif = chol_Nmif,
cooling.fraction.50 = 0.5,
rw.sd = chol_rw,
params = guess
)
} -> m2
# Evaluate the likelihood for each local MIF
foreach(
m = m2,
.packages = c('pomp'),
.combine = rbind
) %dopar% {
logmeanexp(
replicate(
chol_Nreps_eval,
logLik(pfilter(sirb_cholera, params=coef(m), Np = chol_Np))
), se = TRUE
)
} -> lik_m2
})
})
sirb_cholera_temp
sirb_cholera@data
as.numeric(sirb_cholera@data)
cases <- as.numeric(sirb_cholera@data)
a201 <- arima(cases, order = c(2, 0, 1))
log_a201 <- arima(log(df$cases), order = c(2, 0, 1))
log_a201 <- arima(log(cases), order = c(2, 0, 1))
log_a201 <- arima(log(cases + 1), order = c(2, 0, 1))
log_a201$loglik - sum(log(cases), na.rm = TRUE)
log_a201$loglik - sum(log(cases+1), na.rm = TRUE)
a201$loglik
cat("Pomp Is Better")
cat("Pomp Is Better: ", TRUE)
r2$
as
r2 <- data.frame(logLik=lik_m2[,1],logLik_se=lik_m2[,2],
t(sapply(m2,coef))) %>%
arrange(-logLik)
r2$logLik
max(r2$logLik)
cat("Pomp Is Better: ", best_pomp_ll >= best_arma,
"\n\nBest Pomp ll: ", best_pomp_ll,
"\nARMA ll: ", best_arma,
file = paste0('output/', dep, '/global_results.txt'))
r2 <- data.frame(logLik=lik_m2[,1],logLik_se=lik_m2[,2],
t(sapply(m2,coef))) %>%
arrange(-logLik)
cases <- as.numeric(sirb_cholera@data)
a201 <- arima(cases, order = c(2, 0, 1))
log_a201 <- arima(log(cases + 1), order = c(2, 0, 1))
best_pomp_ll <- max(r2$logLik)
armall1 <- log_a201$loglik - sum(log(cases+1), na.rm = TRUE)
armall2 <- a201$loglik
best_arma <- max(armall1, armall2)
cat("Pomp Is Better: ", best_pomp_ll >= best_arma,
"\n\nBest Pomp ll: ", best_pomp_ll,
"\nARMA ll: ", best_arma,
file = paste0('output/', dep, '/global_results.txt'))
input_parameters <- yaml::read_yaml("https://raw.githubusercontent.com/ionides/haiti/main/model3/input/haiti-data/input_parameters.yaml?token=AQ356PMPCSG54WKPJDZZ6I3A64K2C")
usethis::use_data(input_parameters)
CASES_TEMP <- readr::read_csv("https://raw.githubusercontent.com/ionides/haiti/main/model3/input/haiti-data/fromAzman/cases_corrected.csv?token=AQ356PNOJAOF4MGB2BIWCK3A64K7A")
usethis::use_data(CASES_TEMP)
RAIN <- readr::read_csv("https://raw.githubusercontent.com/ionides/haiti/main/model3/input/haiti-data/fromAzman/rainfall.csv?token=AQ356PM3DCWJXDUWFXGA5ETA64LLM")
RAIN <- readr::read_csv("https://raw.githubusercontent.com/ionides/haiti/main/model3/input/haiti-data/fromAzman/rainfall.csv?token=AQ356PM3DCWJXDUWFXGA5ETA64LLM")
usethis::use_data(RAIN)
PARAMS <- read.csv('https://raw.githubusercontent.com/ionides/haiti/main/model3/output/best_artibonite_params.csv?token=AQ356PMHAND3J5L5OSGYLR3A64QJA')
usethis::use_data(PARAMS)
usethis::use_r('junk')
library(haitipkg)
junk
devtools::document()
library(haitipkg)
junk
junk()
devtools::document()
devtools::document()
library(haitipkg)
junk
devtools::document()
library(haitipkg)
mod1 <- haiti3_dep('Nord-Ouest')
mod1
